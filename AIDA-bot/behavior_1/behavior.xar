<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Speech Reco." id="2" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="201" y="31">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="yes;no" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="AIDA-bot" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="241" y="216">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import urllib2
import urllib
import json
import copy
import random

intents = {
    'cancel': ['bye', 'goodbye'],
    'help': ['help'],
    'count': ['count', 'how many'],
    'list': ['list'],
    'describe': ['describe', 'who is', 'what about', 'what is', 'what', 'who'],
    'hello': ['hello', 'hi']
}

combinations = {
    'authors': 'papers',
    'papers': 'papers',
    'conferences': 'conferences',
    'organizations': 'organizations',
    'citations': 'papers'
}

subject_categories = ['authors', 'papers', 'conferences', 'organizations', 'citations']
object_categories = ['topics', 'conferences', 'organizations', 'authors', 'papers']
list_subject_categories = ['authors', 'papers', 'conferences', 'organizations', 'topics']
tags_list = ['<br/>', '<b>', '</b>', '<br/>', '<ul>', '</ul>', '<li>', '</li>', '<i>', '</i>']
marks_list = ['.', '?', ';', ',']
orders = ['publications', 'citations', 'publications in the last 5 years', 'citations in the last 5 years']
homonyms_objects = ['topic', 'conference', 'organization', 'author', 'paper']
homonyms_list = [' affiliated with ', ' author of the paper: ', ', author with ', ' publications']
list_verbs = ['is', 'are']
list_order = ['publication', 'citation', 'publication in the last 5 years', 'citation in the last 5 years']
cancel_words = ['cancel', 'stop', 'enough', 'no']

templates = {
    'WELCOME_MSG': ['Hello! You can ask me to describe, list, or count any scholarly entity.',
                    'Welcome, you can ask me to describe, list, or count any scholarly entity. What would you like to '
                    'try?'],
    'HELLO_MSG': ['Hello! What can I do for you?', 'Hi! what could i do for you?'],
    'OK_MSG': 'Ok',
    'HELP_MSG': [
        'You can ask to count or list authors, papers, conferences, organizations, topics and citations or to '
        'describe authors or conferences. Start a query with list, count or describe',
        'You can ask a query starting with count, list, describe, who or what'],
    'GOODBYE_MSG': ['Goodbye!', 'Bye!', 'See you later!'],
    'REFLECTOR_MSG': 'You just triggered ${intent}',
    'FALLBACK_MSG': 'Sorry, I don\'t know that. Please try again.',
    'ERROR_MSG': 'Sorry, there was an error. Please try again.',

    'HOMONYMS_MSG': 'I found different homonyms: ${msg} ',

    'SUBJECT_REQUEST_MSG': 'I can count papers, authors, conferences, organizations and citations. What do you want '
                           'me to count?',
    'SUBJECT_WRONG_MSG': "Sorry, I can\'t count ${sub}. I can count papers, authors, conferences, organizations and "
                         "citations. What do you prefer?",
    'SUBJECT_REQUEST_REPROMPT_MSG': 'I can count papers, authors, conferences, organizations and citations. What do '
                                    'you prefer?',
    'INSTANCE_MSG': "what is the name of the ${list} whose ${sub} I should count? You can say all for the full list",
    'INSTANCE2_MSG': "what is the name of the ${list} whose ${sub} I should count?",
    'ITEM_MSG': "Searching for ${ins}, I got: ${msg}. To choose, say the number. Which one is correct?",
    'INTENT_CONFIRMATION_1_MSG': "Do you want to know how many ${sub} ${prep} ${obj} are in the AIDA database?",
    'INTENT_CONFIRMATION_2_MSG': "Do you want to know how many ${sub} ${prep} ${ins} ${obj} are in the AIDA database?",
    'TOO_GENERIC_MSG': "Your search for ${ins} got ${results}. You need to try again and to be more specific. Could "
                       "you tell me the exact name?",
    'NO_RESULT_MSG': "Your search for ${ins} got no result. You need to try again. What could I search for you?",
    'QUERY_1_MSG': "I found ${num} ${sub} ${prep} ${ins} ${obj}. You can ask to perform another query on the data "
                   "contained in the AIDA database or ask for Help. What would you like to try?",
    'QUERY_2_MSG': "I found ${num} different ${sub} ${prep} ${obj}. You can ask to perform another query on the data "
                   "contained in the AIDA database or ask for Help. What would you like to try?",

    'REPROMPT_MSG': 'So, what would you like to ask?',
    'NO_QUERY_MSG': 'Sorry, you asked for a query that is not yet implemented. You can ask to perform another query '
                    'on the data contained in the AIDA database or ask for Help. What would you like to try?',

    'REPROMPT_END_MSG': 'You could ask me for another query or say stop to quit',
    'NO_SENSE_MSG': 'I\'m sorry but the query resulting from the chosen options doesn\'t make sense. Try again. You '
                    'can ask to perform another query on the data contained in the AIDA database or ask for Help. '
                    'What would you like to try?',

    'LIST_WRONG_NUMBER_MSG': 'The number ${num} is too big or too small, you should tell me a number higher than one '
                             'and smaller than six',
    'LIST_SUBJECT_REQUEST_MSG': 'I can list papers, authors, conferences, organizations and topics. What do you want '
                                'me to list?',
    'LIST_SUBJECT_WRONG_MSG': 'Sorry, I can\'t list ${sub}. I can list papers, authors, conferences, organizations '
                              'and topics. What do you prefer?',
    'LIST_SUBJECT_REQUEST_REPROMPT_MSG': 'I can list papers, authors, conferences, organizations and topics. What do '
                                         'you prefer?',
    'LIST_ORDER_MSG': 'Which sorting option do you prefer between: (1) publications, (2) citations, '
                      '(3) publications in the last 5 years, (4) citations in the last 5 years?',
    'LIST_PAPERS_ORDER_MSG': 'Which sorting option do you prefer between: (1) citations and (2) citations in the last '
                             '5 years?',
    'LIST_PAPERS_ORDER_WRONG_MSG': 'Sorry, I can\'t list ${sub} sorted by ${order}. I can sort them by: (1) citations '
                                   'and (2) citations in the last 5 years. What do you prefer?',
    'LIST_ORDER_WRONG_MSG': 'Sorry, I can\'t list ${sub} sorted by ${order}. I can sort them by: (1) publications, '
                            '(2) publications in the last 5 years, (3) citations, (4) citations in the last 5 years. '
                            'What do you prefer?',
    'LIST_INSTANCE_MSG': 'what is the name of the ${list} for which ${sub} should be in the top ${num}? You can say '
                         'all for the full list',
    'LIST_INTENT_CONFIRMATION_1_MSG': 'Do you want to know which are the top ${num} ${sub} ${prep} ${obj}, by number '
                                      'of ${order}, in the AIDA database?',
    'LIST_INTENT_CONFIRMATION_2_MSG': 'Do you want to know which are the top ${num} ${sub}, by number of ${order}, '
                                      '${prep} ${ins} ${obj} in the Aida database?',
    'LIST_QUERY_MSG': 'In the AIDA database, the top ${num} ${sub} ${prep} ${ins} ${obj} - by number of ${order} - ${'
                      'verb}: ${lst} You can ask to perform another query on the data contained in the AIDA database '
                      'or ask for Help. What would you like to try?',
    'LIST_NO_RESULT_MSG': 'In the AIDA database, there are no ${sub} ${prep} ${ins} ${obj}. You can ask to perform '
                          'another query on the data contained in the AIDA database or ask for Help. What would you '
                          'like to try?',

    'DSC_TOO_GENERIC_MSG': 'Your search for ${ins} got ${results}. You need to try again and to be more specific. '
                           'What is the name of the author or conference you want to know about?',
    'DSC_NO_RESULT_MSG': 'Your search for ${ins} got no result. You need to try again. What is the name of the author '
                         'or conference you want to know about?',
    'DESCRIBE_INSTANCE_MSG': 'What is the name of the author or conference you want to know about?',
    'DESCRIBE_CONFIRM_MSG': 'Do you want to know something about ${ins}?'
}

count_dict = {
    'sub': {
        'authors': {
            'topics': 'authors',
            'conferences': 'authors',
            'organizations': 'authors',
            'authors': 'authors',
            'papers': 'authors'
        },
        'papers': {
            'topics': 'papers',
            'conferences': 'papers',
            'organizations': 'papers',
            'authors': 'papers',
            'papers': ''
        },
        'conferences': {
            'topics': 'conferences',
            'conferences': 'conferences',
            'organizations': 'conferences',
            'authors': 'conferences',
            'papers': ''
        },
        'organizations': {
            'topics': 'organizations',
            'conferences': 'organizations',
            'organizations': 'organizations',
            'authors': 'organizations',
            'papers': ''
        },
        'citations': {
            'topics': 'citations',
            'conferences': 'citations',
            'organizations': 'citations',
            'authors': 'citations',
            'papers': ''
        }
    },
    'prep': {
        'authors': {
            'topics': 'who have written papers on',
            'conferences': 'who have written papers for',
            'organizations': 'affiliated to the',
            'authors': '',
            'papers': ''
        },
        'papers': {
            'topics': 'on',
            'conferences': 'from',
            'organizations': 'from authors affiliated to the',
            'authors': 'written by the author',
            'papers': ''
        },
        'conferences': {
            'topics': 'with papers on',
            'conferences': '',
            'organizations': 'with papers by authors affiliated to the',
            'authors': 'with papers written by the author',
            'papers': ''
        },
        'organizations': {
            'topics': 'with papers on',
            'conferences': 'with papers at',
            'organizations': '',
            'authors': 'with',
            'papers': ''
        },
        'citations': {
            'topics': 'of papers on',
            'conferences': 'of papers from',
            'organizations': 'of papers written by authors affiliated to the',
            'authors': 'of papers written by the author',
            'papers': ''
        }
    },
    'obj': {
        'authors': {
            'topics': 'topic',
            'conferences': 'conferences',
            'organizations': '',
            'authors': '',
            'papers': ''
        },
        'papers': {
            'topics': 'topic',
            'conferences': 'conferences',
            'organizations': '',
            'authors': '',
            'papers': 'papers'
        },
        'conferences': {
            'topics': 'topic',
            'conferences': '',
            'organizations': '',
            'authors': '',
            'papers': ''
        },
        'organizations': {
            'topics': '',
            'conferences': 'conferences',
            'organizations': '',
            'authors': 'among their affiliated authors',
            'papers': ''
        },
        'citations': {
            'topics': 'topic',
            'conferences': 'conferences',
            'organizations': '',
            'authors': '',
            'papers': ''
        }
    }
}

count_legal_queries = {
    'authors': {
        'topics': [True, False],
        'conferences': [True, True],
        'organizations': [True, False],
        'authors': [False, False],
        'papers': [False, True],
    },
    'papers': {
        'topics': [True, False],
        'conferences': [True, True],
        'organizations': [True, False],
        'authors': [True, False],
        'papers': [False, True],
    },
    'conferences': {
        'topics': [True, False],
        'conferences': [False, True],
        'organizations': [True, False],
        'authors': [True, False],
        'papers': [False, False],
    },
    'organizations': {
        'topics': [True, False],
        'conferences': [True, False],
        'organizations': [False, True],
        'authors': [True, False],
        'papers': [False, False],
    },
    'citations': {
        'topics': [True, False],
        'conferences': [True, False],
        'organizations': [True, False],
        'authors': [True, False],
        'papers': [False, False],
    }
}

obj_cat = [
    ['authors', 'conference acronyms', 'conference names', 'organizations'],
    ['topics', 'conferences', 'organizations', 'authors', 'papers']
]

item_question_object = {
    'topics': 'topic or ',
    'conferences': 'conference or ',
    'organizations': 'organization or ',
    'authors': 'author'
}

numbers = [
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',
    'nine', 'ten', '1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th', 'first', 'second', 'third',
    'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'
]

list_legal_queries = {
    'authors': {
        'topics': [True, True],
        'conferences': [True, True],
        'organizations': [True, True],
        'authors': [False, False],
        'all': [True, True],
    },
    'papers': {
        'topics': [False, True],
        'conferences': [False, True],
        'organizations': [False, True],
        'authors': [False, True],
        'all': [False, True],
    },
    'conferences': {
        'topics': [True, True],
        'conferences': [False, False],
        'organizations': [True, True],
        'authors': [True, True],
        'all': [True, True],
    },
    'organizations': {
        'topics': [True, True],
        'conferences': [True, True],
        'organizations': [False, False],
        'authors': [False, False],
        'all': [True, True],
    },
    'topics': {
        'topics': [False, False],
        'conferences': [True, True],
        'organizations': [True, True],
        'authors': [True, True],
        'all': [True, True],
    }
}

list_dict = {
    'publications': {
        'sub': {
            'authors': {
                'topics': 'authors',
                'conferences': 'authors',
                'organizations': 'authors',
                'authors': 'authors',
                'papers': 'authors'
            },
            'papers': {
                'topics': 'papers',
                'conferences': 'papers',
                'organizations': 'papers',
                'authors': 'papers',
                'papers': ''
            },
            'conferences': {
                'topics': 'conferences',
                'conferences': 'conferences',
                'organizations': 'conferences',
                'authors': 'conferences',
                'papers': ''
            },
            'organizations': {
                'topics': 'organizations',
                'conferences': 'organizations',
                'organizations': 'organizations',
                'authors': 'organizations',
                'papers': ''
            },
            'topics': {
                'topics': 'topics',
                'conferences': 'topics',
                'organizations': 'topics',
                'authors': 'topics',
                'papers': ''
            }
        },
        'prep': {
            'authors': {
                'topics': 'who have written papers on',
                'conferences': 'who have written papers for',
                'organizations': 'affiliated to the',
                'authors': '',
                'papers': ''
            },
            'papers': {
                'topics': 'on',
                'conferences': 'from',
                'organizations': 'from authors affiliated to the',
                'authors': 'written by the author',
                'papers': ''
            },
            'conferences': {
                'topics': 'with papers on',
                'conferences': '',
                'organizations': 'with papers by authors affiliated to the',
                'authors': 'with papers written by the author',
                'papers': ''
            },
            'organizations': {
                'topics': 'with papers on',
                'conferences': 'with papers at',
                'organizations': '',
                'authors': 'with',
                'papers': ''
            },
            'topics': {
                'topics': '',
                'conferences': 'of papers from',
                'organizations': 'of papers written by authors affiliated to the',
                'authors': 'of papers written by the author',
                'papers': ''
            }
        },
        'obj': {
            'authors': {
                'topics': 'topic',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': ''
            },
            'papers': {
                'topics': 'topic',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': 'papers'
            },
            'conferences': {
                'topics': 'topic',
                'conferences': '',
                'organizations': '',
                'authors': '',
                'papers': ''
            },
            'organizations': {
                'topics': '',
                'conferences': 'conferences',
                'organizations': '',
                'authors': 'among their affiliated authors',
                'papers': ''
            },
            'topics': {
                'topics': '',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': ''
            }
        }
    },
    'citations': {
        'sub': {
            'authors': {
                'topics': 'authors',
                'conferences': 'authors',
                'organizations': 'authors',
                'authors': 'authors',
                'papers': 'authors'
            },
            'papers': {
                'topics': 'papers',
                'conferences': 'papers',
                'organizations': 'papers',
                'authors': 'papers',
                'papers': ''
            },
            'conferences': {
                'topics': 'conferences',
                'conferences': 'conferences',
                'organizations': 'conferences',
                'authors': 'conferences',
                'papers': ''
            },
            'organizations': {
                'topics': 'organizations',
                'conferences': 'organizations',
                'organizations': 'organizations',
                'authors': 'organizations',
                'papers': ''
            },
            'topics': {
                'topics': 'topics',
                'conferences': 'topics',
                'organizations': 'topics',
                'authors': 'topics',
                'papers': ''
            }
        },
        'prep': {
            'authors': {
                'topics': 'who have written papers on',
                'conferences': 'who have written papers for',
                'organizations': 'affiliated to the',
                'authors': '',
                'papers': ''
            },
            'papers': {
                'topics': 'on',
                'conferences': 'from',
                'organizations': 'from authors affiliated to the',
                'authors': 'written by the author',
                'papers': ''
            },
            'conferences': {
                'topics': 'with papers on',
                'conferences': '',
                'organizations': 'with papers by authors affiliated to the',
                'authors': 'with papers written by the author',
                'papers': ''
            },
            'organizations': {
                'topics': 'with papers on',
                'conferences': 'with papers at',
                'organizations': '',
                'authors': 'with',
                'papers': ''
            },
            'topics': {
                'topics': '',
                'conferences': 'of papers from',
                'organizations': 'of papers written by authors affiliated to the',
                'authors': 'of papers written by the author',
                'papers': ''
            }
        },
        'obj': {
            'authors': {
                'topics': 'topics',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': ''
            },
            'papers': {
                'topics': 'topics',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': 'papers'
            },
            'conferences': {
                'topics': 'topics',
                'conferences': '',
                'organizations': '',
                'authors': '',
                'papers': ''
            },
            'organizations': {
                'topics': '',
                'conferences': 'conferences',
                'organizations': '',
                'authors': 'among their affiliated authors',
                'papers': ''
            },
            'topics': {
                'topics': '',
                'conferences': 'conferences',
                'organizations': '',
                'authors': '',
                'papers': ''
            }
        }
    }
}

dsc_list = [' is an author', ' affiliated to ', ' affiliated to the ', 'Author rating: ', 'Publications: ',
            'Citations: ', 'Total number of co-authors: ', 'The top topic in terms of publications is: ',
            'The top topics in terms of publications are: ', 'The top conference in terms of publications is: ',
            'The top conferences in terms of publications are: ', 'The top journal in terms of publications is: ',
            'The top journals in terms of publications are: ', ', acronym of ',
            ', is a conference whose focus areas are: ', 'The rankings are: ', 'citations in the last 5 years: ',
            'Years of activity: from ', ' to ', 'Number of publications in the last year: ',
            'The top country in terms of publications is: ', 'The top countries in terms of publications are: ',
            'The top organization in education is: ', 'The top organizations in education are: ',
            'The top organization in industry is: ', 'The top organizations in industry are: ',
            'publications in the last 5 years: ', 'number of affiliated authors: ']

session = {'level': 0, 'intent': {'name': '', 'level': 0, 'slots': {}}}
zora = {}

def get_data(cmd, ins):
    response = urllib2.urlopen('http://aidabot.ddns.net/api?pass=123abc&' + cmd + urllib.quote(str(ins)))
    data = json.load(response)  # type: dict
    # print data
    assert isinstance(data, dict)
    return data


def getIntent(msg):
    message = msg.lower().split(" ")
    for key in intents:
        for i in range(len(message)):
            for j in range(len(intents[key])):
                words = intents[key][j].split(' ')
                intent_length = len(words)
                for k in range(len(words)):
                    z = (+i) + (+k)
                    if z < len(message) and words[k] == message[z]:
                        intent_length -= 1
                if intent_length == 0:
                    return [key, intents[key][j]]
    return ['fallback', '']


def getUserDescribeQueryText(msg):
    query = msg
    idx = -1
    for i in range(len(intents['describe'])):
        if intents['describe'][i] in query:
            idx = query.index(intents['describe'][i])
        if idx >= 0:
            query = query[idx + len(intents['describe'][i]) + 1: len(query)]
            return query
    return query


def item_question(subject):
    msg = ''
    sub = subject

    if count_legal_queries[sub]['topics'][0]:
        msg += item_question_object['topics']
    if count_legal_queries[sub]['conferences'][0]:
        msg += item_question_object['conferences']
    if count_legal_queries[sub]['organizations'][0]:
        msg += item_question_object['organizations']
    if count_legal_queries[sub]['authors'][0]:
        msg += item_question_object['authors']
    s = msg[len(msg) - 4: len(msg)]
    if s == ' or ':
        msg = msg[0: len(msg) - 3]
    return msg


def kk_message(speak, cmd):
    message = ''
    for j in range(len(speak['num'])):
        if speak['num'][j] > 0:
            message += str(speak['num'][j])
            message += (' hits' if speak['num'][j] > 1 else ' hit') + ' among the ' + obj_cat[cmd][j] + ', '
    message = message[0: len(message) - 2]
    return message


def choice_list(speak):
    message = ''
    n = 0
    cmd = 0 if speak.get('cmd') is not None else 1
    print cmd
    for i in range(len(speak['num'])):
        if speak['num'][i] > 0:
            for j in range(len(speak['keys'][i])):
                message += numbers[n] + ', '
                message += (speak['keys'][i][j]['name'] if cmd == 0 else speak['keys'][i][j]) + '; '
                n += 1
            message += ' among the ' + obj_cat[cmd][i] + '. '
    message = message[0: len(message) - 2]
    return message


def homonyms(speak):
    msg = ''
    item = speak['item']
    for i in range(len(item)):
        num = 'say ' + numbers[i] + ' for '
        msg += num + item[i]['name']
        if item[i].get('affiliation') is not None:
            msg += homonyms_list[0] + item[i]['affiliation'] + "; "
        elif item[i].get('country') is not None:
            msg += ' - ' + item[i]['country'] + "; "
        elif item[i].get('paper') is not None:
            msg += homonyms_list[1] + item[i]['paper'] + "; "
        elif item[i].get('publications') is not None:
            msg += homonyms_list[2] + item[i]['publications'] + homonyms_list[3] + "; "
        else:
            msg += "; "
        if i > 9:
            return msg
    return msg


def get_number(item):
    words = item.split(' ')
    for i in words:
        if i in numbers:
            return numbers.index(i) % 10
    return None


def get_choice(speak, num):
    for i in range(len(speak['num'])):
        n = num - speak['num'][i]
        if n < 0 or i == len(speak['num']) - 1:
            return speak['keys'][i][num]
        else:
            num = n


def list_item_question(subject):
    msg = ''
    sub = subject
    if list_legal_queries[sub]['topics'][1]:
        msg += item_question_object['topics']
    if list_legal_queries[sub]['conferences'][1]:
        msg += item_question_object['conferences']
    if list_legal_queries[sub]['organizations'][1]:
        msg += item_question_object['organizations']
    if list_legal_queries[sub]['authors'][1]:
        msg += item_question_object['authors']
    s = msg[len(msg) - 4: len(msg)]
    if s == ' or ':
        msg = msg[0: len(msg) - 3]
    return msg


def lst(result, order, sub):
    o = orders.index(order)
    msg = ''
    lst_ = result['lst']
    if o == 1 or o == 3:
        for i in lst_:
            author = ''
            if i.get('author') is not None and len(i['author']) > 0:
                author = ' by ' + upper_authors(i['author'])
            if i['citations'] == 1:
                i['citations'] = '1'
                ord_ = list_order[o]
            else:
                ord_ = order
            msg += (upper_first(i['name']) if sub == 'authors' else i['name'][0].upper() + i['name'][1:])
            msg += author + ' with ' + str(int(i['citations'])) + ' ' + ord_.split(' ')[0] + '; '
    else:
        for i in lst_:
            # if i.get('author') is not None and len(i.author) > 0:
            #    author = ' by ' + upper_authors(i.author)
            if i['papers'] == 1:
                i['papers'] = '1'
                ord_ = list_order[o]
            else:
                ord_ = order
            msg += (upper_first(i['name']) if sub == 'authors' else i['name'][0].upper() + i['name'][1:])
            msg += ' with ' + str(i['papers']) + ' ' + ord_.split(' ')[0] + '; '
    return msg


def upper_authors(string):
    if ' et al.' in string:
        author = string.replace(' et al.', '')
        author = upper_first(author)
        return author + ' et al.'
    return upper_first(string)


def list_elements(lst1, element):
    blacklist = ['computer science', 'lecture notes in computer science', 'arxiv software engineering']
    lst_ = []
    if len(element) > 0:
        for i in lst1:
            if i[element] not in blacklist:
                lst_.append(i)
    else:
        for i in lst1:
            if i not in blacklist:
                lst_.append(i)

    i = len(lst_)
    if i > 3:
        i = 3
    msg = ''
    j = 0
    while j < i:
        if len(element) > 0:
            msg += upper_first(lst_[j][element]) + '; '
        else:
            msg += upper_first(lst_[j]) + '; '
        j += 1
    return msg


def upper_first(str_):
    s = str_.split(' ')
    result = ''
    for i in range(len(s)):
        result += ' ' + s[i][0].upper() + s[i][1:]
    return result[1:]


def dsc(query):
    msg = ''
    item = query['item']
    if query['obj_id'] == 1:
        msg += upper_first(item['name']) + dsc_list[0]
        if item['last_affiliation'].get('affiliation_name') is not None:
            s = item['last_affiliation']['affiliation_name'].split(' ')
            msg += (dsc_list[1] if (s[0] == 'the' or s[0] == 'The') else dsc_list[2])
            msg += item['last_affiliation']['affiliation_name']
            if item['last_affiliation'].get('affiliation_country') is not None:
                msg += ', ' + item['last_affiliation']['affiliation_country'] + '. '
        else:
            msg += '. '
        msg += dsc_list[3]
        if item.get('publications') is not None:
            msg += dsc_list[4] + str(item['publications']) + '; '
        if item.get('citations') is not None:
            msg += dsc_list[5] + str(item['citations']) + '; '
        if item.get('h-index') is not None:
            msg += 'h-index: ' + str(item['h-index']) + '; '
        if item.get('h5-index') is not None:
            msg += 'h5-index: ' + str(item['h5-index']) + '; '
        if item.get('co_authors') is not None and item['co_authors'] > 0:
            msg += dsc_list[6] + str(item['co_authors']) + '; '
        if item.get('top_pub_topics') is not None and len(item['top_pub_topics']) > 0:
            msg += dsc_list[7] if len(item['top_pub_topics']) == 1 else dsc_list[8]
            msg += list_elements(item['top_pub_topics'], 'topic')
        if item.get('top_pub_conf') is not None and len(item['top_pub_conf']) > 0:
            msg += dsc_list[9] if len(item['top_pub_conf']) == 1 else dsc_list[10]
            msg += list_elements(item['top_pub_conf'], 'name')
        if item.get('top_journals') is not None and len(item['top_journals']) > 0:
            msg += dsc_list[11] if len(item['top_journals']) == 1 else dsc_list[12]
            msg += list_elements(item['top_journals'], 'name')
    elif query['obj_id'] == 2 or query['obj_id'] == 3:
        msg += item['acronym'] + dsc_list[13] + item['name'] + dsc_list[14]
        msg += list_elements(item['topics'], '')
        msg += dsc_list[15]
        if item.get('h5_index') is not None:
            msg += 'h5-index: ' + str(item['h5_index']) + '; '
        if item.get('citationcount_5') is not None:
            msg += dsc_list[16] + str(item['citationcount_5']) + '; '
        if item.get('activity_years') is not None:
            msg += dsc_list[17] + str(item['activity_years']['from'])
            msg += dsc_list[18] + str(item['activity_years']['to']) + '; '
        if item.get('last_year_publications') is not None:
            msg += dsc_list[19] + str(item['last_year_publications']) + '; '
        if len(item['top_3_country']) > 0:
            msg += dsc_list[20] if len(item['top_3_country']) == 1 else dsc_list[21]
            msg += list_elements(item['top_3_country'], '')
        if len(item['top_3_edu']) > 0:
            msg += dsc_list[22] if len(item['top_3_edu']) == 1 else dsc_list[23]
            msg += list_elements(item['top_3_edu'], '')
        if len(item['top_3_company']) > 0:
            msg += dsc_list[24] if len(item['top_3_company']) == 1 else dsc_list[25]
            msg += list_elements(item['top_3_company'], '')
    elif query['obj_id'] == 4:
        msg += item['name']
        msg += ((' - ' + item['country'] + ' -') if item.get('country') is not None else '') + ' is an organization'
        if item.get('type') is not None and (item['type'] == 'academia' or item['type'] == 'industry'):
            msg += ' in ' + ('Edu' if item['type'] == 'academia' else 'Industry') + ' sector. '
        else:
            msg += '. '

        msg += dsc_list[15]
        if item.get('h5-index') is not None:
            msg += 'h5-index: ' + str(item['h5-index']) + '; '
        if item.get('publications_5') is not None:
            msg += dsc_list[26] + str(item['publications_5']) + '; '
        if item.get('citations_5') is not None:
            msg += dsc_list[16] + str(item['citations_5']) + '; '
        if item.get('authors_number') is not None:
            msg += dsc_list[27] + str(item['authors_number']) + '; '
        if item.get('top_3_topics') is not None and len(item['top_3_topics']) > 0:
            msg += dsc_list[7] if len(item['top_3_topics']) == 1 else dsc_list[8]
            msg += list_elements(item['top_3_topics'], '')
        if item.get('top_3_conferences') is not None and len(item['top_3_conferences']) > 0:
            msg += dsc_list[9] if len(item['top_3_conferences']) == 1 else dsc_list[10]
            msg += list_elements(item['top_3_conferences'], '')
        if item.get('top_3_journals') is not None and len(item['top_3_journals']) > 0:
            msg += dsc_list[11] if len(item['top_3_journals']) == 1 else dsc_list[12]
            msg += list_elements(item['top_3_journals'], '')
        else:
            msg += 'Sorry, Query not yet implemented!'
            return msg
    msg += 'You can ask to perform another query on the data contained in the AIDA database or ask for Help. '
    return msg + 'What would you like to try?'


def session_reset():
    global session
    session = {'level': 0, 'intent': {'name': '', 'level': 0, 'slots': {}}}


def intent_verify(msg):
    global session
    intent = getIntent(msg)
    msg = msg.replace(intent[1], intent[0])
    intent = intent[0]
    if intent == 'hello':
        setMessage('HELLO_MSG')  # TODO implement answer action
    elif intent == 'help':
        setMessage('HELP_MSG')
    elif intent == 'cancel':
        setMessage('GOODBYE_MSG')
        session_reset()
    elif intent == 'count' or intent == 'list':
        session['level'] = 1
        setIntentSlots(get_data('cmd=parser&ins=', str(msg)))

    elif intent == 'describe':
        session['intent']['name'] = 'describe'
        session['level'] = 1
        query = getUserDescribeQueryText(msg)
        if len(query) > 0:
            session['intent']['slots']['ins'] = query
        describe_query('')
        return
    elif intent == 'fallback':
        setMessage('FALLBACK_MSG')
    return


# set intent name and slots with the results from the parser
def setIntentSlots(data):
    cmd = ''
    global session

    if data.get('cmd') is not None:
        cmd = data['cmd']['value']

    if cmd == 'count':
        session['intent']['name'] = 'count'
        if data.get('sub') is not None:
            session['intent']['slots']['sub'] = data['sub']['value']
        if data.get('ins') is not None:
            session['intent']['slots']['ins'] = data['ins']['value']
        if data.get('obj') is not None:
            session['intent']['slots']['obj'] = data['obj']['value']
        elif data.get('sub') is not None and data.get('ins') is not None and data['ins']['value'] == 'all':
            session['intent']['slots']['obj'] = combinations[data['sub']['value']]
        count_query('')

    if cmd == 'list':
        session['intent']['name'] = 'list'
        if data.get('num') is not None:
            session['intent']['slots']['num'] = data['num']['value']
        if data.get('sub') is not None:
            session['intent']['slots']['sub'] = data['sub']['value']
        if data.get('ins') is not None:
            session['intent']['slots']['ins'] = data['ins']['value']
        if data.get('obj') is not None:
            session['intent']['slots']['obj'] = data['obj']['value']
        elif data.get('sub') is not None and data.get('ins') is not None and data['ins']['value'] == 'all':
            session['intent']['slots']['obj'] = 'all'
        if data.get('order') is not None:
            session['intent']['slots']['order'] = data['order']['value']
        list_query('')


def count_query(msg):
    global session
    slots = session['intent']['slots']
    sub = slots.get('sub')
    obj = slots.get('obj')
    ins = slots.get('ins')
    idx = slots.get('id')
    sub_id = (subject_categories.index(sub) + 1) if sub in subject_categories else 0
    obj_id = (object_categories.index(obj) + 1) if obj in object_categories else 0

    # no level - verifying slots
    if session['intent'].get('level') == 0:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        if sub is None and len(msg) == 0:
            setMessage('SUBJECT_REQUEST_MSG')
            return

        if sub is None and len(msg) > 0:
            if msg in subject_categories:
                sub_id = subject_categories.index(msg) + 1
                session['intent']['slots']['sub'] = msg
                sub = msg
                msg = ''

            else:
                setMessage('SUBJECT_WRONG_MSG', {'sub': msg})
                return

        if sub is not None and sub not in subject_categories:
            setMessage('SUBJECT_WRONG_MSG', {'sub': sub})
            del session['intent']['slots']['sub']
            return

        if ins is not None and ins != 'all':
            session['intent']['level'] = 1
            data = get_data('cmd=fnd&ins=', ins)
            count_query(data)
            return

        if ins is None and len(msg) == 0:
            message = 'INSTANCE_MSG'
            if sub_id == 5:
                message = 'INSTANCE2_MSG'
            setMessage(message, {'list': item_question(sub), 'sub': sub})
            return

        if ins is None and len(msg) > 0 and msg != 'all':
            session['intent']['slots']['ins'] = msg
            data = get_data('cmd=fnd&ins=', msg)
            session['intent']['level'] = 1
            count_query(data)
            return

        if (sub is not None and ins is not None and ins == 'all') or (sub is not None and ins is None and msg == 'all'):
            if not count_legal_queries[sub][combinations[sub]][1]:
                setMessage('NO_SENSE_MSG')
                session_reset()
                return
            obj = combinations[sub]
            session['intent']['slots']['obj'] = obj
            session['intent']['slots']['ins'] = 'no'
            setMessage('INTENT_CONFIRMATION_1_MSG',
                       {'sub': count_dict['sub'][sub][obj],
                        'prep': count_dict['prep'][sub][obj],
                        'obj': count_dict['obj'][sub][obj]})
            session['intent']['level'] = 2
            return
        return

    # verifying ins
    if session['intent']['level'] == 1:
        # case ok
        if msg['result'] == 'ok':
            ins = msg['item']
            session['intent']['slots']['ins'] = ins
            obj_id = msg['obj_id']
            obj = msg['object']
            session['intent']['slots']['obj'] = obj

            if obj_id == 2 or obj_id == 4:
                session['intent']['slots']['id'] = msg['id']

            if not count_legal_queries[sub][obj][0]:
                setMessage('NO_SENSE_MSG', {})
                session_reset()
                return

            if obj_id == 4:
                ins = upper_first(ins)

            setMessage('INTENT_CONFIRMATION_2_MSG',
                       {'sub': count_dict['sub'][sub][obj],
                        'prep': count_dict['prep'][sub][obj],
                        'obj': count_dict['obj'][sub][obj],
                        'ins': ins})
            session['intent']['level'] = 2
            return

        # case kk (too many results fnd search)
        if msg['result'] == 'kk':
            message = kk_message(msg, 1)
            setMessage('TOO_GENERIC_MSG', {'ins': ins, 'results': message})
            session['intent']['level'] = 0
            del session['intent']['slots']['ins']
            return

        # case ko (no result fnd search)
        if msg['result'] == 'ko':
            setMessage('NO_RESULT_MSG', {'ins': ins})
            session['intent']['level'] = 0
            del session['intent']['slots']['ins']
            return

        # case k2 (multiple results fnd search)
        if msg['result'] == 'k2':
            session['intent']['items_list'] = msg
            message = choice_list(msg)
            setMessage('ITEM_MSG', {'ins': ins, 'msg': message})
            session['intent']['level'] = 3
            return

        # case ka(homonyms fnd search)
        if msg['result'] == 'ka':
            session['intent']['homonyms_list'] = msg
            message = homonyms(msg)
            setMessage('HOMONYMS_MSG', {'msg': message, 'obj': homonyms_objects[msg['obj_id'] - 1]})
            session['intent']['level'] = 4
            return

    # check, confirm and display of results
    if session['intent']['level'] == 2:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        inst = ins
        if idx is not None:
            inst = idx

        data = get_data('cmd=how&sub=' + str(sub_id) + '&obj=' + str(obj_id) + '&ins=', inst)

        if data['result'] != 'ok':
            setMessage('NO_QUERY_MSG', {})
            session_reset()
            return

        if obj_id == 4:
            ins = upper_first(ins)

        message = 'QUERY_1_MSG'
        if ins == 'no':
            message = 'QUERY_2_MSG'
            setMessage(message, {'num': data['hits'], 'sub': count_dict['sub'][sub][obj],
                                 'obj': count_dict['obj'][sub][obj], 'prep': count_dict['prep'][sub][obj]})
        else:
            msg_sub = count_dict['sub'][sub][obj][0: len(sub) - 1] if data['hits'] == '1' else count_dict['sub'][sub][
                obj]
            setMessage(message, {'num': data['hits'], 'sub': msg_sub, 'obj': count_dict['obj'][sub][obj],
                                 'prep': count_dict['prep'][sub][obj], 'ins': ins})

        session_reset()
        return

    # multiple result list management
    if session['intent']['level'] == 3:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= sum(session['intent']['items_list']['num']):
            ins = get_choice(session['intent']['items_list'], num)
            session['intent']['slots']['ins'] = ins
            session['intent']['level'] = 0
            del session['intent']['items_list']
            count_query('')
            return
        else:
            session['intent']['level'] = 1
            msg = session['intent']['items_list']
            del session['intent']['items_list']
            count_query(msg)

    # homonyms list management
    if session['intent']['level'] == 4:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= (len(session['intent']['homonyms_list']['item']) - 1):
            if session['intent']['homonyms_list']['obj_id'] == 2:
                # noinspection PyTypeChecker
                ins = session['intent']['homonyms_list']['item'][num]['acronym']
            else:
                # noinspection PyTypeChecker
                ins = session['intent']['homonyms_list']['item'][num]['name']
            msg = copy.deepcopy(session['intent']['homonyms_list'])
            msg["result"] = "ok"
            # noinspection PyTypeChecker
            msg["id"] = session['intent']['homonyms_list']['item'][num]['id']
            msg["item"] = ins
        else:
            msg = session['intent']['homonyms_list']

        del session['intent']['homonyms_list']
        session['intent']['level'] = 1
        count_query(msg)
        return


def list_query(msg):
    slots = session['intent']['slots']
    sub = slots.get('sub')
    obj = slots.get('obj')
    ins = slots.get('ins')
    idx = slots.get('id')
    num = slots.get('num')
    order = slots.get('order')

    sub_id = (list_subject_categories.index(sub) + 1) if sub in list_subject_categories else 0
    obj_id = (object_categories.index(obj) + 1) if obj in object_categories else 0
    order_id = (orders.index(order) + 1) if order in orders else 0

    # level == 0 - verifying slots
    if session['intent'].get('level') == 0:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        if num is not None and (int(num) > 5 or int(num) < 2):
            if len(msg) == 0:
                setMessage('LIST_WRONG_NUMBER_MSG', {'num': str(num)})
                return
            elif 1 < int(msg) < 6:
                session['intent']['slots']['num'] = int(msg)
                num = session['intent']['slots']['num']
                msg = ''
            else:
                setMessage('LIST_WRONG_NUMBER_MSG', {'num': str(num)})
                # msg = ''
                return

        if sub is None and len(msg) == 0:
            setMessage('LIST_SUBJECT_REQUEST_MSG', {})
            return

        if sub is None and len(msg) > 0:
            if msg in list_subject_categories:
                sub = msg
                session['intent']['slots']['sub'] = msg
                msg = ''
                sub_id = list_subject_categories.index(sub) + 1
            else:
                setMessage('LIST_SUBJECT_WRONG_MSG', {'sub': msg})
                return

        if sub is not None and sub not in list_subject_categories:
            setMessage('LIST_SUBJECT_WRONG_MSG', {'sub': sub})
            if session['intent']['slots'].get('sub') is not None:
                del session['intent']['slots']['sub']
            return

        if ins is not None and ins != 'all':
            session['intent']['level'] = 1
            data = get_data('cmd=fnd&ins=', ins)
            list_query(data)
            return

        if (ins is not None and ins == 'all') or (ins is None and msg == 'all'):
            session['intent']['level'] = 2
            session['intent']['slots']['obj'] = 'all'
            session['intent']['slots']['ins'] = 'all'
            list_query('')
            return

        if ins is None and len(msg) == 0:
            message = 'LIST_INSTANCE_MSG'
            setMessage(message, {'list': list_item_question(sub), 'sub': sub, 'num': num})
            return

        if ins is None and len(msg) > 0 and msg != 'all':
            session['intent']['slots']['ins'] = msg
            data = get_data('cmd=fnd&ins=', msg)
            session['intent']['level'] = 1
            list_query(data)
            return

    # verifica ins != 'all'
    if session['intent']['level'] == 1:

        # ok case
        if msg['result'] == 'ok':
            # ins = msg['item']
            session['intent']['slots']['ins'] = msg['item']
            obj_id = msg['obj_id']
            session['intent']['slots']['obj'] = msg['object']

            if obj_id == 2 or obj_id == 4:
                session['intent']['slots']['id'] = msg['id']

            session['intent']['level'] = 2
            list_query('')
            return

        # kk case
        if msg['result'] == 'kk':
            message = kk_message(msg, 1)
            setMessage('TOO_GENERIC_MSG', {'ins': ins, 'results': message})
            if session['intent'].get('level') is not None:
                session['intent']['level'] = 0
            if session['intent']['slots'].get('ins') is not None:
                del session['intent']['slots']['ins']
            return

        # ko case
        if msg['result'] == 'ko':
            setMessage('NO_RESULT_MSG', {'ins': ins})
            if session['intent'].get('level') is not None:
                session['intent']['level'] = 0
            if session['intent']['slots'].get('ins') is not None:
                del session['intent']['slots']['ins']
            return

        # k2 case
        if msg['result'] == 'k2':
            session['intent']['items_list'] = msg
            message = choice_list(msg)
            setMessage('ITEM_MSG', {'ins': ins, 'msg': message})
            session['intent']['level'] = 3
            return

        # ka case homonyms
        if msg['result'] == 'ka':
            session['intent']['homonyms_list'] = msg
            message = homonyms(msg)
            # noinspection PyTypeChecker
            setMessage('HOMONYMS_MSG', {'msg': message, 'obj': homonyms_objects[msg['obj_id'] - 1]})
            session['intent']['level'] = 4
            return

    # slots verify part II
    if session['intent']['level'] == 2:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        if order is None and len(msg) == 0:
            message = 'LIST_ORDER_MSG'
            if sub is not None and list_subject_categories.index(sub) == 1:
                message = 'LIST_PAPERS_ORDER_MSG'
            setMessage(message, {'num': num, 'sub': sub})
            return

        if order is None and len(msg) > 0:
            n = get_number(msg)
            if n is not None:

                if sub is not None and list_subject_categories.index(sub) == 1:
                    if -1 < n < 2:
                        msg = orders[n*2+1]
                else:
                    if -1 < n < 4:
                        msg = orders[n]
            print msg
            if msg in orders:
                order = msg
                session['intent']['slots']['order'] = msg
                msg = ''
                order_id = orders.index(order) + 1
            else:
                message = 'LIST_ORDER_WRONG_MSG'
                if sub is not None and list_subject_categories.index(sub) == 1:
                    message = 'LIST_PAPERS_ORDER_WRONG_MSG'
                setMessage(message, {'sub': sub, 'order': msg})
                return

        if ins is not None and ins == 'all':
            if not list_legal_queries[sub]['all'][orders.index(order.split(' ')[0])]:
                setMessage('NO_SENSE_MSG', {})
                session_reset()
                return

            setMessage('LIST_INTENT_CONFIRMATION_1_MSG',
                       {'order': order, 'num': num, 'sub': (list_dict[order.split(' ')[0]]['sub'][sub][sub]),
                        'prep': list_dict[order.split(' ')[0]]['prep'][sub][sub],
                        'obj': list_dict[order.split(' ')[0]]['obj'][sub][sub]})
            session['intent']['level'] = 5
            return

        if ins is not None and ins != 'all':
            if not list_legal_queries[sub][obj][orders.index(order.split(' ')[0])]:
                setMessage('NO_SENSE_MSG')
                session_reset()
                return

            msg_ins = ins
            if obj_id == 4:
                msg_ins = upper_first(ins)

            options = {'ins': msg_ins, 'order': order, 'num': num,
                       'sub': (list_dict[order.split(' ')[0]]['sub'][sub][obj]),
                       'prep': list_dict[order.split(' ')[0]]['prep'][sub][obj],
                       'obj': list_dict[order.split(' ')[0]]['obj'][sub][obj]}

            setMessage('LIST_INTENT_CONFIRMATION_2_MSG', options)
            session['intent']['level'] = 5
            return

    # multiple result list management
    if session['intent']['level'] == 3:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= sum(session['intent']['items_list']['num']):
            ins = get_choice(session['intent']['items_list'], num)
            session['intent']['slots']['ins'] = ins
            session['intent']['level'] = 0
            del session['intent']['items_list']
            list_query('')
            return
        else:
            session['intent']['level'] = 1
            msg = session['intent']['items_list']
            del session['intent']['items_list']
            list_query(msg)

    # homonyms list management
    if session['intent']['level'] == 4:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG', {})
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= (len(session['intent']['homonyms_list']['item']) - 1):
            if session['intent']['homonyms_list']['obj_id'] == 2:
                # noinspection PyTypeChecker
                ins = session['intent']['homonyms_list']['item'][num]['acronym']
            else:
                # noinspection PyTypeChecker
                ins = session['intent']['homonyms_list']['item'][num]['name']
            msg = copy.deepcopy(session['intent']['homonyms_list'])
            msg["result"] = "ok"
            # noinspection PyTypeChecker
            msg["id"] = session['intent']['homonyms_list']['item'][num]['id']
            msg["item"] = ins
        else:
            msg = session['intent']['homonyms_list']

        del session['intent']['homonyms_list']
        session['intent']['level'] = 1
        list_query(msg)
        return

    # check, confirm and display of results
    if session['intent']['level'] == 5:
        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        inst = ins
        if idx is not None:
            inst = idx

        call = 'cmd=lst&sub=' + str(sub_id) + '&obj=' + str(obj_id) + '&ord='
        call += str(order_id) + '&num=' + str(num) + '&ins='
        data = get_data(call, inst)

        if obj == 'all':
            obj = sub
            ins = ''

        msg_ins = ins
        if obj_id == 4:
            msg_ins = upper_first(ins)

        ord_ = order.split(' ')[0]
        sub1 = list_dict[ord_]['sub'][sub][obj]
        obj1 = list_dict[ord_]['obj'][sub][obj]
        prep = list_dict[ord_]['prep'][sub][obj]

        if data['result'] == 'ok' and len(data['lst']) > 0:

            msg_num = '' if len(data['lst']) == 1 else num
            msg_sub = sub1[0: len(sub) - 1] if len(data['lst']) == 1 else sub1
            options = {'order': order, 'num': msg_num, 'sub': msg_sub, 'obj': obj1, 'prep': prep, 'ins': msg_ins,
                       'verb': (list_verbs[0] if len(data['lst']) == 1 else list_verbs[1]),
                       'lst': lst(data, order, sub)}
            setMessage('LIST_QUERY_MSG', options)

        elif len(data['lst']) == 0:
            setMessage('LIST_NO_RESULT_MSG', {'sub': sub1, 'obj': obj1, 'ins': ins, 'prep': prep})

        else:
            setMessage('NO_QUERY_MSG')

        session_reset()
        return

    return


def describe_query(msg):
    slots = session['intent']['slots']
    ins = slots.get('ins')

    # level 0 slots verify
    if session['intent']['level'] == 0:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        if ins is None and len(msg) == 0:
            setMessage('DESCRIBE_INSTANCE_MSG')
            return

        if (ins is not None) or (ins is None and len(msg) > 0):
            if ins is None:
                session['intent']['slots']['ins'] = session['original_input']   # previously msg
            data = get_data('cmd=dsc&ins=', session['intent']['slots']['ins'])
            session['intent']['level'] = 1
            describe_query(data)
            return

    # ins verify
    if session['intent']['level'] == 1:

        # ok case
        if msg['result'] == 'ok':
            message_ins = ''
            session['intent']['slots']['results'] = msg
            session['intent']['level'] = 2

            if msg['obj_id'] == 1:
                message_ins += upper_first(msg['item']['name'])
            elif msg['obj_id'] == 4:
                message_ins += msg['item']['name']
            elif 1 < msg['obj_id'] < 4 and 'conference' in msg['item']['name'].lower():
                message_ins += msg['item']['name']
            else:
                message_ins += msg['item']['name']+' conference'

            setMessage("DESCRIBE_CONFIRM_MSG", {'ins': message_ins})
            return

        # kk case - too many results
        if msg['result'] == 'kk':
            message = kk_message(msg, 0)
            setMessage('DSC_TOO_GENERIC_MSG', {'ins': ins, 'results': message})
            session['intent']['level'] = 0
            del session['intent']['slots']['ins']
            return

        # ko case - no result
        if msg['result'] == 'ko':
            setMessage('DSC_NO_RESULT_MSG', {'ins': ins})
            session['intent']['level'] = 0
            del session['intent']['slots']['ins']
            return

        # k2 case multiple results
        if msg['result'] == 'k2':
            msg['cmd'] = 'dsc'
            session['intent']['items_list'] = msg
            message = choice_list(msg)
            setMessage('ITEM_MSG', {'ins': ins, 'msg': message})
            session['intent']['level'] = 3
            return

        # ka case homonyms
        if msg['result'] == 'ka':
            session['intent']['homonyms_list'] = msg
            message = homonyms(msg)
            setMessage('HOMONYMS_MSG', {'msg': message})
            session['intent']['level'] = 4
            return

    # check, confirm and display of results
    if session['intent']['level'] == 2:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        if session['intent']['slots'].get('results') is not None:
            message = dsc(session['intent']['slots']['results'])
            appendMessage(message)
            # TODO set robot action
            session_reset()
            return

        else:
            setMessage('NO_QUERY_MSG')
            session_reset()
            return

    # multiple result list management
    if session['intent']['level'] == 3:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= sum(session['intent']['items_list']['num']):
            ins = get_choice(session['intent']['items_list'], num)
            session['intent']['slots']['ins'] = ins['name']
            session['intent']['level'] = 0
            del session['intent']['items_list']
            describe_query('')
            return

        else:
            session['intent']['level'] = 1
            msg = session['intent']['items_list']
            del session['intent']['items_list']
            describe_query(msg)

    # homonyms list management
    if session['intent']['level'] == 4:

        if msg in cancel_words:
            setMessage('REPROMPT_MSG')
            session_reset()
            return

        num = get_number(msg)
        if num is not None and num <= len(session['intent']['homonyms_list']['item']) - 1:
            idx = session['intent']['homonyms_list']['item'][num]['id']
            if session['intent']['homonyms_list']['obj_id'] == 4:
                idx = '00' + str(idx)
            del session['intent']['homonyms_list']
            data = get_data('cmd=dsc&ins=', idx)
            session['intent']['level'] = 1
            describe_query(data)
            return

        else:
            msg = session['intent']['homonyms_list']
            del session['intent']['homonyms_list']
            session['intent']['level'] = 1
            describe_query(msg)
            return


def cycle(user_input):
    if len(user_input) == 0:
        return
    msg = user_input
    for i in range(len(marks_list)):
        msg = msg.replace(marks_list[i], '')
    session['original_input'] = msg
    msg = msg.lower()
    # verification of intent
    if session['level'] == 0:
        intent_verify(msg)
        return
    # transfers control to complex intents depending on the intent name
    if session['level'] == 1:
        intent = getIntent(msg)[0]
        if intent != 'fallback':
            session['level'] = 0
            if session['intent'].get('level') is not None:
                session['intent']['level'] = 0
            if session['intent'].get('homonyms_list') is not None:
                del session['intent']['homonyms_list']
            if session['intent'].get('items_list') is not None:
                del session['intent']['items_list']
            intent_verify(msg)
            return
        if session['intent']['name'] == 'count':
            count_query(msg)
            return
        elif session['intent']['name'] == 'list':
            list_query(msg)
            return
        elif session['intent']['name'] == 'describe':
            describe_query(msg)
            return


def setMessage(msg, options=None):
    value = templates[msg]
    if isinstance(value, list):
        value = value[int(random.randint(0, len(value) - 1))]
    lst_ = []
    if options is not None and len(options) > 0:
        n = -1
        str0 = value
        while '$' in str0:
            n = str0.index('$', n + 1)
            n1 = str0.index("}", n) + 1
            str1 = str0[n: n1]
            lst_.append(str1)
            str0 = str0[0:n] + str0[n + 1: len(str0)]

        for i in options:
            if isinstance(options[i], list):
                value = value.replace('${' + i + '}', str(options[i][0]))
            else:
                value = value.replace('${' + i + '}', str(options[i]))
        for i in lst_:
            value = value.replace(i, '')
    while '  ' in value:
        value = value.replace('  ', ' ')

    value = value.replace(' . ', '. ')
    value = value.replace(' , ', ', ')

    zora['answer'] = value
    zora['action'] = msg


def appendMessage(value):
    zora['answer'] = value
    zora['action'] = 'DESCRIBE'






class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        setMessage('WELCOME_MSG')
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, s):
        cycle(str(s))
        self.speech(str(zora['answer']))
        self.Movement(zora['action'])


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onWelcome(self):
        setMessage('WELCOME_MSG')
        self.speech(zora['answer'])
        self.Movement(zora['action'])]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="onWelcome" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
              <Output name="Movement" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
              <Output name="speech" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
            </Box>
            <Box name="Apply Posture" id="1" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="49" y="102">
              <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Parameter name="Name" inherits_from_parent="0" content_type="3" value="StandInit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                <Choice value="Crouch" />
                <Choice value="LyingBack" />
                <Choice value="LyingBelly" />
                <Choice value="Sit" />
                <Choice value="SitRelax" />
                <Choice value="StandInit" />
                <Choice value="Stand" />
                <Choice value="StandZero" />
              </Parameter>
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Hello" id="6" localization="8" tooltip="Hello Motion" x="771" y="42">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="95" size="95">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram />
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="">
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="5" value="28.2319" />
                    <Key frame="11" value="28.2319" />
                    <Key frame="17" value="21.9" />
                    <Key frame="23" value="28.2319" />
                    <Key frame="29" value="28.2319" />
                    <Key frame="35" value="28.2319" />
                    <Key frame="42" value="28.2319" />
                    <Key frame="50" value="28.2319" />
                    <Key frame="57" value="28.2319" />
                    <Key frame="64" value="28.2319" />
                    <Key frame="72" value="28.2319" />
                    <Key frame="80" value="28.2319" />
                    <Key frame="87" value="28.2319" />
                    <Key frame="94" value="28.2319" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="5" value="75.6919" />
                    <Key frame="11" value="75.6919" />
                    <Key frame="17" value="51.1" />
                    <Key frame="23" value="75.6919" />
                    <Key frame="29" value="75.6919" />
                    <Key frame="35" value="75.6919" />
                    <Key frame="42" value="75.6919" />
                    <Key frame="50" value="75.6919" />
                    <Key frame="57" value="75.6919" />
                    <Key frame="64" value="75.6919" />
                    <Key frame="72" value="75.6919" />
                    <Key frame="80" value="75.6919" />
                    <Key frame="87" value="75.6919" />
                    <Key frame="94" value="75.6919" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="5" value="0.32867" />
                    <Key frame="11" value="0.32867" />
                    <Key frame="17" value="0.32867" />
                    <Key frame="23" value="0.32867" />
                    <Key frame="29" value="0.91" />
                    <Key frame="35" value="0.08" />
                    <Key frame="42" value="0.91" />
                    <Key frame="50" value="0.08" />
                    <Key frame="57" value="0.91" />
                    <Key frame="64" value="0.08" />
                    <Key frame="72" value="0.91" />
                    <Key frame="80" value="0.32867" />
                    <Key frame="87" value="0.32867" />
                    <Key frame="94" value="0.32867" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="5" value="81.7" />
                    <Key frame="11" value="2" />
                    <Key frame="17" value="-57.2" />
                    <Key frame="23" value="-53.1" />
                    <Key frame="29" value="-53.1" />
                    <Key frame="35" value="-53.1" />
                    <Key frame="42" value="-53.1" />
                    <Key frame="50" value="-53.1" />
                    <Key frame="57" value="-53.1" />
                    <Key frame="64" value="-53.1" />
                    <Key frame="72" value="-53.1" />
                    <Key frame="80" value="2" />
                    <Key frame="87" value="81.7" />
                    <Key frame="94" value="90.9" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="5" value="-12.1675" />
                    <Key frame="11" value="-12.1675" />
                    <Key frame="17" value="-12.1675" />
                    <Key frame="23" value="-12.1675" />
                    <Key frame="29" value="-12.1675" />
                    <Key frame="35" value="-12.1675" />
                    <Key frame="42" value="-12.1675" />
                    <Key frame="50" value="-12.1675" />
                    <Key frame="57" value="-12.1675" />
                    <Key frame="64" value="-12.1675" />
                    <Key frame="72" value="-12.1675" />
                    <Key frame="80" value="-12.1675" />
                    <Key frame="87" value="-12.1675" />
                    <Key frame="94" value="-12.1675" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="5" value="8.63999" />
                    <Key frame="11" value="8.63999" />
                    <Key frame="17" value="-52.7" />
                    <Key frame="23" value="-85.7" />
                    <Key frame="29" value="-85.7" />
                    <Key frame="35" value="-85.7" />
                    <Key frame="42" value="-85.7" />
                    <Key frame="50" value="-85.7" />
                    <Key frame="57" value="-85.7" />
                    <Key frame="64" value="-85.7" />
                    <Key frame="72" value="-85.7" />
                    <Key frame="80" value="8.63999" />
                    <Key frame="87" value="8.63999" />
                    <Key frame="94" value="8.63999" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Motion" id="7" localization="8" tooltip="" x="532" y="225">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_cmd(self, p):
        if p == 'HELLO_MSG':
            self.onHello()
        elif p == 'GOODBYE_MSG':
            self.onCancel()
        elif p == 'REPROMPT_MSG':
            self.onReprompt()
        elif p == 'HELP_MSG':
            self.onHelp()
        elif p == 'FALLBACK_MSG':
            self.onFallback()
        elif p == 'WELCOME_MSG':
            self.onWelcome()
        elif p == 'QUERY_1_MSG' or p == 'QUERY_2_MSG':
            self.count_result()
        else:
            pass

    def onInput_stop(self):
        self.stopMove()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="cmd" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
              <Input name="stop" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
              <Output name="onHello" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
              <Output name="onHelp" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="onCancel" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
              <Output name="onFallback" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
              <Output name="onReprompt" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
              <Output name="onList" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
              <Output name="onDescribe" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
              <Output name="stopMove" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
              <Output name="onWelcome" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
              <Output name="count_result" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
            </Box>
            <Box name="Say Text" id="9" localization="8" tooltip="Say the text received on its input." x="385" y="312">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Stand" id="14" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="959" y="279">
              <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                <Choice value="Crouch" />
                <Choice value="LyingBack" />
                <Choice value="LyingBelly" />
                <Choice value="Sit" />
                <Choice value="SitRelax" />
                <Choice value="StandInit" />
                <Choice value="Stand" />
                <Choice value="StandZero" />
              </Parameter>
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Confused" id="20" localization="8" tooltip="ID : #02C 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Confused" x="779" y="358">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="65">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="25" value="2.72224" />
                    <Key frame="45" value="-0.00240423" />
                    <Key frame="65" value="5.71056" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="25" value="-30.8524" />
                    <Key frame="45" value="-33.4013" />
                    <Key frame="65" value="-30.4129" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="23" value="69.8715" />
                    <Key frame="43" value="73.7388" />
                    <Key frame="63" value="75.4087" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="23" value="0.498473" />
                    <Key frame="43" value="3.51326" />
                    <Key frame="63" value="2.89802" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="23" value="-28.3914" />
                    <Key frame="43" value="-55.7258" />
                    <Key frame="63" value="-68.7337" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="23" value="-46.4923" />
                    <Key frame="43" value="-67.9379" />
                    <Key frame="63" value="-61.0823" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="43" value="-43" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="43" value="0.58" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="21" value="76.3803" />
                    <Key frame="41" value="73.8315" />
                    <Key frame="61" value="83.148" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="21" value="-0.529755" />
                    <Key frame="41" value="-0.881321" />
                    <Key frame="61" value="-0.969213" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="21" value="44.4708" />
                    <Key frame="41" value="55.1936" />
                    <Key frame="61" value="69.6078" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="21" value="69.8763" />
                    <Key frame="41" value="79.896" />
                    <Key frame="61" value="65.9212" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="41" value="52" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="41" value="0.527273" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                    <Key frame="42" value="-27.9472" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                    <Key frame="42" value="1.40867" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                    <Key frame="42" value="-3.86483" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                    <Key frame="42" value="30.2323" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                    <Key frame="42" value="-10.9889" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                    <Key frame="42" value="0.178188" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                    <Key frame="42" value="1.49656" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                    <Key frame="42" value="-0.79343" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                    <Key frame="42" value="26.8973" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                    <Key frame="42" value="-10.0173" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                    <Key frame="42" value="-1.84332" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
            </Box>
            <Box name="Kisses" id="73" localization="8" tooltip="ID : #02A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Kisses" x="776" y="259">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="138">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="21" value="-4.3091" />
                    <Key frame="41" value="-2.81494" />
                    <Key frame="63" value="-1.84813" />
                    <Key frame="90" value="-1.84813" />
                    <Key frame="108" value="-2.02391" />
                    <Key frame="138" value="-2.11181" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="21" value="-18.3718" />
                    <Key frame="41" value="-0.79343" />
                    <Key frame="63" value="-21.0085" />
                    <Key frame="90" value="-17" />
                    <Key frame="108" value="-22.9421" />
                    <Key frame="138" value="-14.0651" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="19" value="49.4806" />
                    <Key frame="39" value="21.0037" />
                    <Key frame="61" value="10.7204" />
                    <Key frame="88" value="54.7541" />
                    <Key frame="106" value="80.067" />
                    <Key frame="136" value="84.8131" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="19" value="1.75543" />
                    <Key frame="39" value="1.40386" />
                    <Key frame="61" value="0.876513" />
                    <Key frame="88" value="52.3811" />
                    <Key frame="106" value="33.6601" />
                    <Key frame="136" value="3.86483" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="19" value="-110.746" />
                    <Key frame="39" value="-45.9698" />
                    <Key frame="61" value="-50.2765" />
                    <Key frame="88" value="-101.517" />
                    <Key frame="106" value="-109.691" />
                    <Key frame="136" value="-65.4817" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="19" value="-30.6718" />
                    <Key frame="39" value="-89.5017" />
                    <Key frame="61" value="-89.2077" />
                    <Key frame="88" value="-44.9982" />
                    <Key frame="106" value="-28.6503" />
                    <Key frame="136" value="-21.619" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="39" value="-68.4701" />
                    <Key frame="61" value="-64.427" />
                    <Key frame="88" value="-88" />
                    <Key frame="106" value="-64.8665" />
                    <Key frame="136" value="-8.00055" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="39" value="0.73166" />
                    <Key frame="61" value="0.702933" />
                    <Key frame="88" value="0.8" />
                    <Key frame="106" value="0.676387" />
                    <Key frame="136" value="0.109844" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="17" value="57.923" />
                    <Key frame="37" value="23.3816" />
                    <Key frame="59" value="1.76024" />
                    <Key frame="86" value="63.3723" />
                    <Key frame="104" value="80.0718" />
                    <Key frame="134" value="88.0699" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="17" value="-9.84628" />
                    <Key frame="37" value="-2.02391" />
                    <Key frame="59" value="-6.24272" />
                    <Key frame="86" value="-48.6944" />
                    <Key frame="104" value="-37.2685" />
                    <Key frame="134" value="-2.46337" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="17" value="119.496" />
                    <Key frame="37" value="50.5353" />
                    <Key frame="59" value="38.8457" />
                    <Key frame="86" value="111.181" />
                    <Key frame="104" value="119.442" />
                    <Key frame="134" value="86.5709" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="17" value="30.2372" />
                    <Key frame="37" value="89.3004" />
                    <Key frame="59" value="89.5017" />
                    <Key frame="86" value="41.0478" />
                    <Key frame="104" value="23.9968" />
                    <Key frame="134" value="25.0515" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="37" value="57.4788" />
                    <Key frame="59" value="56.9514" />
                    <Key frame="86" value="80" />
                    <Key frame="104" value="56.8635" />
                    <Key frame="134" value="0.173379" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="37" value="0.789478" />
                    <Key frame="59" value="0.758933" />
                    <Key frame="86" value="0.909091" />
                    <Key frame="104" value="0.730569" />
                    <Key frame="134" value="0.22548" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                    <Key frame="38" value="-15.5544" />
                    <Key frame="60" value="-16.7849" />
                    <Key frame="87" value="-18.9822" />
                    <Key frame="105" value="-18.9822" />
                    <Key frame="135" value="-17.9275" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                    <Key frame="38" value="6.59428" />
                    <Key frame="60" value="1.58446" />
                    <Key frame="87" value="-0.349163" />
                    <Key frame="105" value="-0.173379" />
                    <Key frame="135" value="5.45169" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                    <Key frame="38" value="20.5691" />
                    <Key frame="60" value="5.80326" />
                    <Key frame="87" value="-1.84332" />
                    <Key frame="105" value="-1.84332" />
                    <Key frame="135" value="12.2194" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                    <Key frame="38" value="-5.29104" />
                    <Key frame="60" value="-5.29104" />
                    <Key frame="87" value="-5.29104" />
                    <Key frame="105" value="-5.29104" />
                    <Key frame="135" value="-5.10012" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                    <Key frame="38" value="3.33748" />
                    <Key frame="60" value="9.40201" />
                    <Key frame="87" value="14.4997" />
                    <Key frame="105" value="14.4118" />
                    <Key frame="135" value="6.76526" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                    <Key frame="38" value="-5.09532" />
                    <Key frame="60" value="-2.28278" />
                    <Key frame="87" value="-0.876513" />
                    <Key frame="105" value="-0.876513" />
                    <Key frame="135" value="-4.91953" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                    <Key frame="38" value="-6.15002" />
                    <Key frame="60" value="-3.1617" />
                    <Key frame="87" value="0.353971" />
                    <Key frame="105" value="0.353971" />
                    <Key frame="135" value="-3.33748" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                    <Key frame="38" value="21.2674" />
                    <Key frame="60" value="5.53477" />
                    <Key frame="87" value="-1.93602" />
                    <Key frame="105" value="-2.02391" />
                    <Key frame="135" value="12.4782" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                    <Key frame="38" value="-5.71056" />
                    <Key frame="60" value="-5.88634" />
                    <Key frame="87" value="-5.90622" />
                    <Key frame="105" value="-5.88634" />
                    <Key frame="135" value="-4.39218" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                    <Key frame="38" value="2.72705" />
                    <Key frame="60" value="9.40682" />
                    <Key frame="87" value="14.4166" />
                    <Key frame="105" value="14.5924" />
                    <Key frame="135" value="6.15482" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                    <Key frame="38" value="4.13332" />
                    <Key frame="60" value="3.07861" />
                    <Key frame="87" value="0.617646" />
                    <Key frame="105" value="0.705538" />
                    <Key frame="135" value="2.81494" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
            </Box>
            <Box name="Bored" id="22" localization="8" tooltip="ID : #02C 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Bored" x="793" y="467">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="145">
                <BehaviorLayer name="LED">
                  <BehaviorKeyframe name="thinking" index="1">
                    <Diagram>
                      <Box name="blinks" id="1" localization="8" tooltip="blinks" x="151" y="48">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.2 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.5 );

        rDuration = 1;
        self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration );

        time.sleep( 2.5 );

        rDuration = 0.6;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );


        return;


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="32" value="1.49176" />
                    <Key frame="62" value="8.08363" />
                    <Key frame="106" value="14.3239" />
                    <Key frame="145" value="-2.99072" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="32" value="1.49176" />
                    <Key frame="62" value="30.5839" />
                    <Key frame="106" value="30.5839" />
                    <Key frame="145" value="3.33748" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="28" value="81.1217" />
                    <Key frame="58" value="78.3091" />
                    <Key frame="102" value="78.2212" />
                    <Key frame="141" value="85.4284" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="28" value="7.11683" />
                    <Key frame="58" value="7.64418" />
                    <Key frame="102" value="12.0388" />
                    <Key frame="141" value="9.92936" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="28" value="-44.2119" />
                    <Key frame="58" value="-67.3275" />
                    <Key frame="102" value="-73.1283" />
                    <Key frame="141" value="-46.4971" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="28" value="-54.7541" />
                    <Key frame="58" value="-23.2889" />
                    <Key frame="102" value="-14.9392" />
                    <Key frame="141" value="-33.6601" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="58" value="-41.3115" />
                    <Key frame="102" value="-40.4326" />
                    <Key frame="141" value="-40.3447" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="58" value="0.268389" />
                    <Key frame="102" value="0.261844" />
                    <Key frame="141" value="0.270207" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="24" value="76.8198" />
                    <Key frame="54" value="72.0736" />
                    <Key frame="98" value="73.5678" />
                    <Key frame="137" value="84.5542" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="24" value="-6.85796" />
                    <Key frame="54" value="-6.68218" />
                    <Key frame="98" value="-8.26423" />
                    <Key frame="137" value="-12.8346" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="24" value="40.9551" />
                    <Key frame="54" value="47.547" />
                    <Key frame="98" value="54.3147" />
                    <Key frame="137" value="48.0744" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="24" value="46.6729" />
                    <Key frame="54" value="17.3171" />
                    <Key frame="98" value="7.4732" />
                    <Key frame="137" value="35.3349" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="54" value="55.1057" />
                    <Key frame="98" value="54.9299" />
                    <Key frame="137" value="54.842" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="54" value="0.359298" />
                    <Key frame="98" value="0.350207" />
                    <Key frame="137" value="0.364025" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                    <Key frame="56" value="-18.9718" />
                    <Key frame="100" value="-21.1691" />
                    <Key frame="139" value="-16.6866" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                    <Key frame="56" value="0" />
                    <Key frame="100" value="-1.6232" />
                    <Key frame="139" value="6.81441" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                    <Key frame="56" value="-22.1872" />
                    <Key frame="100" value="-23.7693" />
                    <Key frame="139" value="5.58656" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                    <Key frame="56" value="19" />
                    <Key frame="100" value="21.8249" />
                    <Key frame="139" value="10.1353" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                    <Key frame="56" value="3" />
                    <Key frame="100" value="1.44574" />
                    <Key frame="139" value="-2" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                    <Key frame="56" value="-3" />
                    <Key frame="100" value="-1.28216" />
                    <Key frame="139" value="-5.50096" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                    <Key frame="56" value="2.29103" />
                    <Key frame="100" value="4.40043" />
                    <Key frame="139" value="-2" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                    <Key frame="56" value="-18.2768" />
                    <Key frame="100" value="-20.5619" />
                    <Key frame="139" value="3.95985" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                    <Key frame="56" value="18.8154" />
                    <Key frame="100" value="20.9248" />
                    <Key frame="139" value="9.67464" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                    <Key frame="56" value="-1" />
                    <Key frame="100" value="-2.49492" />
                    <Key frame="139" value="-2" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                    <Key frame="56" value="2" />
                    <Key frame="100" value="0.217547" />
                    <Key frame="139" value="1" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="Left eye leds" type="Lock" timeout="1" />
              <Resource name="Right eye leds" type="Lock" timeout="1" />
              <Resource name="HeadYaw" type="Lock" timeout="1" />
              <Resource name="HeadPitch" type="Lock" timeout="1" />
              <Resource name="LShoulderPitch" type="Lock" timeout="1" />
              <Resource name="LShoulderRoll" type="Lock" timeout="1" />
              <Resource name="LElbowRoll" type="Lock" timeout="1" />
              <Resource name="LElbowYaw" type="Lock" timeout="1" />
              <Resource name="LWristYaw" type="Lock" timeout="1" />
              <Resource name="LHand" type="Lock" timeout="1" />
              <Resource name="RShoulderPitch" type="Lock" timeout="1" />
              <Resource name="RShoulderRoll" type="Lock" timeout="1" />
              <Resource name="RElbowRoll" type="Lock" timeout="1" />
              <Resource name="RElbowYaw" type="Lock" timeout="1" />
              <Resource name="RWristYaw" type="Lock" timeout="1" />
              <Resource name="RHand" type="Lock" timeout="1" />
              <Resource name="LHipYawPitch" type="Lock" timeout="1" />
              <Resource name="LHipRoll" type="Lock" timeout="1" />
              <Resource name="LHipPitch" type="Lock" timeout="1" />
              <Resource name="LKneePitch" type="Lock" timeout="1" />
              <Resource name="LAnklePitch" type="Lock" timeout="1" />
              <Resource name="LAnkleRoll" type="Lock" timeout="1" />
              <Resource name="RHipRoll" type="Lock" timeout="1" />
              <Resource name="RHipPitch" type="Lock" timeout="1" />
              <Resource name="RKneePitch" type="Lock" timeout="1" />
              <Resource name="RAnklePitch" type="Lock" timeout="1" />
              <Resource name="RAnkleRoll" type="Lock" timeout="1" />
            </Box>
            <Box name="Chill" id="15" localization="8" tooltip="ID : #02B 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Chill" x="772" y="150">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="193">
                <ActuatorList model="">
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="15" value="2.98591" />
                    <Key frame="31" value="18.7" />
                    <Key frame="39" value="18.7" />
                    <Key frame="57" value="19.2459" />
                    <Key frame="64" value="19.2459" />
                    <Key frame="71" value="14" />
                    <Key frame="81" value="-21.9" />
                    <Key frame="91" value="-21.9" />
                    <Key frame="112" value="-21.9" />
                    <Key frame="123" value="-21.9" />
                    <Key frame="137" value="18.7" />
                    <Key frame="145" value="18.7" />
                    <Key frame="163" value="19.2459" />
                    <Key frame="170" value="19.2459" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="15" value="-7.9" />
                    <Key frame="31" value="13.1" />
                    <Key frame="39" value="13.1" />
                    <Key frame="57" value="-14.8" />
                    <Key frame="64" value="-13.1" />
                    <Key frame="81" value="13.1" />
                    <Key frame="91" value="13.1" />
                    <Key frame="112" value="-13.1" />
                    <Key frame="123" value="-13.1" />
                    <Key frame="137" value="13.1" />
                    <Key frame="145" value="13.1" />
                    <Key frame="163" value="-14.8" />
                    <Key frame="170" value="-13.1" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="14" value="-12.0436" />
                    <Key frame="41" value="-7.12163" />
                    <Key frame="66" value="-10.1978" />
                    <Key frame="91" value="-4.2164" />
                    <Key frame="118" value="-10.1978" />
                    <Key frame="142" value="-7.12163" />
                    <Key frame="167" value="-10.1978" />
                    <Key frame="192" value="-4.2164" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="14" value="-2.89802" />
                    <Key frame="41" value="2.55127" />
                    <Key frame="91" value="-9.40682" />
                    <Key frame="142" value="2.55127" />
                    <Key frame="192" value="-9.40682" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="15" value="-37.2637" />
                    <Key frame="42" value="-41.043" />
                    <Key frame="67" value="-48.6" />
                    <Key frame="92" value="-38.4111" />
                    <Key frame="119" value="-48.6" />
                    <Key frame="143" value="-41.043" />
                    <Key frame="168" value="-48.6" />
                    <Key frame="193" value="-38.4111" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="15" value="-69.9642" />
                    <Key frame="42" value="-44.4756" />
                    <Key frame="67" value="-39.3779" />
                    <Key frame="92" value="-20.3885" />
                    <Key frame="119" value="-39.3779" />
                    <Key frame="143" value="-44.4756" />
                    <Key frame="168" value="-39.3779" />
                    <Key frame="193" value="-20.3885" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="15" value="0.73" />
                    <Key frame="42" value="0.306" />
                    <Key frame="67" value="0.37" />
                    <Key frame="92" value="0.3048" />
                    <Key frame="119" value="0.37" />
                    <Key frame="143" value="0.306" />
                    <Key frame="168" value="0.37" />
                    <Key frame="193" value="0.3048" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="14" value="-5.18321" />
                    <Key frame="41" value="27.73" />
                    <Key frame="66" value="8.17634" />
                    <Key frame="91" value="25.2225" />
                    <Key frame="118" value="8.17634" />
                    <Key frame="142" value="27.73" />
                    <Key frame="167" value="8.17634" />
                    <Key frame="192" value="25.2225" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="14" value="2.37549" />
                    <Key frame="41" value="-3.60116" />
                    <Key frame="91" value="10.1051" />
                    <Key frame="142" value="-3.60116" />
                    <Key frame="192" value="10.1051" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="14" value="-10.3688" />
                    <Key frame="41" value="-8.4352" />
                    <Key frame="66" value="-10.2809" />
                    <Key frame="91" value="-8.4352" />
                    <Key frame="118" value="-10.2809" />
                    <Key frame="142" value="-8.4352" />
                    <Key frame="167" value="-10.2809" />
                    <Key frame="192" value="-8.4352" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="14" value="24.2557" />
                    <Key frame="41" value="-5.18802" />
                    <Key frame="66" value="13.5329" />
                    <Key frame="91" value="-5.18321" />
                    <Key frame="118" value="13.5329" />
                    <Key frame="142" value="-5.18802" />
                    <Key frame="167" value="13.5329" />
                    <Key frame="192" value="-5.18321" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="15" value="75.0571" />
                    <Key frame="42" value="71.4" />
                    <Key frame="67" value="69.3442" />
                    <Key frame="92" value="67.9" />
                    <Key frame="119" value="69.3442" />
                    <Key frame="143" value="71.4" />
                    <Key frame="168" value="69.3442" />
                    <Key frame="193" value="67.9" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="15" value="2.28279" />
                    <Key frame="42" value="-5.71537" />
                    <Key frame="67" value="2" />
                    <Key frame="92" value="-5.62267" />
                    <Key frame="119" value="2" />
                    <Key frame="143" value="-5.71537" />
                    <Key frame="168" value="2" />
                    <Key frame="193" value="-5.62267" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="15" value="0.173378" />
                    <Key frame="42" value="31.287" />
                    <Key frame="67" value="6.4137" />
                    <Key frame="92" value="-9.22623" />
                    <Key frame="119" value="6.4137" />
                    <Key frame="143" value="31.287" />
                    <Key frame="168" value="6.4137" />
                    <Key frame="193" value="-9.22623" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="14" value="-7.3805" />
                    <Key frame="41" value="-4.2164" />
                    <Key frame="66" value="-6.58948" />
                    <Key frame="91" value="-7.12163" />
                    <Key frame="118" value="-6.58948" />
                    <Key frame="142" value="-4.2164" />
                    <Key frame="167" value="-6.58948" />
                    <Key frame="192" value="-7.12163" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="14" value="7.38531" />
                    <Key frame="41" value="9.40682" />
                    <Key frame="91" value="-2.55127" />
                    <Key frame="142" value="9.40682" />
                    <Key frame="192" value="-2.55127" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="13" value="30.9403" />
                    <Key frame="40" value="38.4111" />
                    <Key frame="65" value="48.6" />
                    <Key frame="90" value="41.043" />
                    <Key frame="117" value="48.6" />
                    <Key frame="141" value="38.4111" />
                    <Key frame="166" value="48.6" />
                    <Key frame="191" value="41.043" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="13" value="59.1487" />
                    <Key frame="40" value="20.3885" />
                    <Key frame="65" value="38.2305" />
                    <Key frame="90" value="44.4756" />
                    <Key frame="117" value="38.2305" />
                    <Key frame="141" value="20.3885" />
                    <Key frame="166" value="38.2305" />
                    <Key frame="191" value="44.4756" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="13" value="0.73" />
                    <Key frame="40" value="0.3048" />
                    <Key frame="65" value="0.37" />
                    <Key frame="90" value="0.306" />
                    <Key frame="117" value="0.37" />
                    <Key frame="141" value="0.3048" />
                    <Key frame="166" value="0.37" />
                    <Key frame="191" value="0.306" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="14" value="-4.74855" />
                    <Key frame="41" value="25.2225" />
                    <Key frame="66" value="11.5114" />
                    <Key frame="91" value="27.73" />
                    <Key frame="118" value="11.5114" />
                    <Key frame="142" value="25.2225" />
                    <Key frame="167" value="11.5114" />
                    <Key frame="192" value="27.73" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="14" value="-6.15001" />
                    <Key frame="41" value="-10.1051" />
                    <Key frame="91" value="3.60116" />
                    <Key frame="142" value="-10.1051" />
                    <Key frame="192" value="3.60116" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="14" value="-10.3688" />
                    <Key frame="41" value="-8.4352" />
                    <Key frame="66" value="-10.2809" />
                    <Key frame="91" value="-8.4352" />
                    <Key frame="118" value="-10.2809" />
                    <Key frame="142" value="-8.4352" />
                    <Key frame="167" value="-10.2809" />
                    <Key frame="192" value="-8.4352" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="14" value="18.6354" />
                    <Key frame="41" value="-5.18321" />
                    <Key frame="66" value="6.24271" />
                    <Key frame="91" value="-5.18802" />
                    <Key frame="118" value="6.24271" />
                    <Key frame="142" value="-5.18321" />
                    <Key frame="167" value="6.24271" />
                    <Key frame="192" value="-5.18802" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="13" value="68.2064" />
                    <Key frame="40" value="71.4" />
                    <Key frame="65" value="71.4584" />
                    <Key frame="90" value="67.9" />
                    <Key frame="117" value="71.4584" />
                    <Key frame="141" value="71.4" />
                    <Key frame="166" value="71.4584" />
                    <Key frame="191" value="67.9" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="13" value="1.84332" />
                    <Key frame="40" value="5.62267" />
                    <Key frame="65" value="-2" />
                    <Key frame="90" value="5.71537" />
                    <Key frame="117" value="-2" />
                    <Key frame="141" value="5.62267" />
                    <Key frame="166" value="-2" />
                    <Key frame="191" value="5.71537" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="13" value="15.906" />
                    <Key frame="40" value="9.22623" />
                    <Key frame="65" value="-2.90283" />
                    <Key frame="90" value="-31.287" />
                    <Key frame="117" value="-2.90283" />
                    <Key frame="141" value="9.22623" />
                    <Key frame="166" value="-2.90283" />
                    <Key frame="191" value="-31.287" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
            </Box>
            <Box name="Crouch" id="26" localization="8" tooltip="Set directly all the joints of the robot in the asked posture." x="960" y="121">
              <bitmap>media/images/box/movement/setRobotPosture.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.applyPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                <Choice value="Crouch" />
                <Choice value="LyingBack" />
                <Choice value="LyingBelly" />
                <Choice value="Sit" />
                <Choice value="SitRelax" />
                <Choice value="StandInit" />
                <Choice value="Stand" />
                <Choice value="StandZero" />
              </Parameter>
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Result" id="27" localization="8" tooltip="Enter description here" x="794" y="581">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="activate" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Input name="stop" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Output name="finish" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Thinking" id="29" localization="8" tooltip="ID : #02B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Thinking" x="375" y="57">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="19" value="-6.5" />
                              <Key frame="31" value="12.8913" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="31" value="8.87482" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0">
                              <Key frame="28" value="-3.43271" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0">
                              <Key frame="28" value="-3.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0">
                              <Key frame="28" value="-2.85928" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="17" value="-45.8" />
                              <Key frame="29" value="-85.0768" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="17" value="-80.4" />
                              <Key frame="29" value="-54.7589" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="17" value="0.96" />
                              <Key frame="29" value="0.7036" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="29" value="-29.3582" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="29" value="18.8064" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="17" value="-51.3" />
                              <Key frame="29" value="-47.7276" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="15" value="32.9" />
                              <Key frame="27" value="21.8875" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="15" value="84.7" />
                              <Key frame="27" value="70.7504" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="15" value="0.54" />
                              <Key frame="27" value="0.3504" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="27" value="88.6852" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="27" value="-6.24271" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="15" value="28.5" />
                              <Key frame="27" value="1.75543" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="28" value="6.94104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="28" value="-0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="28" value="7.20952" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="28" value="-0.349159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="28" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="28" value="-5.18802" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="28" value="6.59429" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="28" value="-1.0523" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="28" value="7.73207" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="28" value="1.40867" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="28" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="28" value="-5.29" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                      </Box>
                      <Box name="repeater" id="25" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="376" y="312">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        if nInput == 1:
            self.ok = False

        if nInput == 2 and self.ok:
            self.signalsReceived()

    def onInput_stop(self):
        self.onStart(1)
        self.finish()

    def onInput_repeat(self):
        self.onStart(2)

    def onInput_activate(self):
        self.ok = True]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="stop" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                        <Input name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                        <Input name="activate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                        <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="5" />
                        <Output name="finish" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                      </Box>
                      <Box name="Thinking (1)" id="1" localization="8" tooltip="ID : #02B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Thinking" x="384" y="536">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="77" size="77">
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="37" value="11.5" />
                              <Key frame="76" value="13.8" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="76" value="9.00008" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0">
                              <Key frame="73" value="-3.43291" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0">
                              <Key frame="73" value="-3.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0">
                              <Key frame="73" value="-2.85951" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="74" value="-86.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="74" value="-52.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.44" />
                              <Key frame="10" value="0.73" />
                              <Key frame="25" value="0.44" />
                              <Key frame="35" value="0.73" />
                              <Key frame="52" value="0.44" />
                              <Key frame="62" value="0.73" />
                              <Key frame="74" value="0.65" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="74" value="-33.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="74" value="19.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="74" value="-49.4001" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="72" value="20.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="72" value="69.9984" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="72" value="0.33" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="72" value="89.9544" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="72" value="-6.8755" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="72" value="-1.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="73" value="7.02893" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="73" value="-0.173378" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="73" value="7.20952" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="73" value="-0.349159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="73" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="73" value="-5.10013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="73" value="6.68218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="73" value="-1.0523" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="73" value="7.81997" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="73" value="1.40867" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="73" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="73" value="-5.29" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                      </Box>
                      <Link inputowner="25" indexofinput="2" outputowner="0" indexofoutput="3" />
                      <Link inputowner="0" indexofinput="4" outputowner="25" indexofoutput="6" />
                      <Link inputowner="25" indexofinput="4" outputowner="29" indexofoutput="4" />
                      <Link inputowner="29" indexofinput="3" outputowner="25" indexofoutput="6" />
                      <Link inputowner="1" indexofinput="2" outputowner="25" indexofoutput="5" />
                      <Link inputowner="29" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="25" indexofinput="3" outputowner="29" indexofoutput="4" />
                      <Link inputowner="25" indexofinput="3" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="5" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="10" indexofinput="4" outputowner="1" indexofoutput="4" />
            <Link inputowner="7" indexofinput="2" outputowner="10" indexofoutput="6" />
            <Link inputowner="14" indexofinput="2" outputowner="20" indexofoutput="4" />
            <Link inputowner="73" indexofinput="2" outputowner="7" indexofoutput="6" />
            <Link inputowner="20" indexofinput="2" outputowner="7" indexofoutput="7" />
            <Link inputowner="14" indexofinput="2" outputowner="22" indexofoutput="4" />
            <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="7" />
            <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="5" />
            <Link inputowner="14" indexofinput="2" outputowner="15" indexofoutput="4" />
            <Link inputowner="15" indexofinput="3" outputowner="7" indexofoutput="11" />
            <Link inputowner="20" indexofinput="3" outputowner="7" indexofoutput="11" />
            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="27" indexofinput="2" outputowner="7" indexofoutput="13" />
            <Link inputowner="27" indexofinput="3" outputowner="7" indexofoutput="11" />
            <Link inputowner="26" indexofinput="2" outputowner="73" indexofoutput="4" />
            <Link inputowner="14" indexofinput="2" outputowner="27" indexofoutput="4" />
            <Link inputowner="22" indexofinput="2" outputowner="7" indexofoutput="8" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
